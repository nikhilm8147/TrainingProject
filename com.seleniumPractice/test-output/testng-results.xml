<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="1" failed="1" ignored="1" total="6" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="1393" started-at="2021-08-25T03:43:29Z" finished-at="2021-08-25T03:43:30Z">
    <groups>
    </groups>
    <test name="Default test" duration-ms="1393" started-at="2021-08-25T03:43:29Z" finished-at="2021-08-25T03:43:30Z">
      <class name="com.example.BasicExtentReport">
        <test-method status="PASS" signature="startReport(java.lang.String, java.lang.String)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="startReport" is-config="true" duration-ms="521" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[param-val-not-found]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[param-val-not-found]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- startReport -->
        <test-method status="PASS" signature="testCase1()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="testCase1" duration-ms="32" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase1 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="getResult" is-config="true" duration-ms="33" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase1 status=SUCCESS method=BasicExtentReport.testCase1()[pri:0, instance:com.example.BasicExtentReport@e25b2fe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase2()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="testCase2" duration-ms="0" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase2 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="getResult" is-config="true" duration-ms="0" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase3 status=SUCCESS method=BasicExtentReport.testCase3()[pri:0, instance:com.example.BasicExtentReport@e25b2fe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="FAIL" signature="testCase4()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="testCase4" duration-ms="8" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
	at org.testng.Assert.fail(Assert.java:94)
	at org.testng.Assert.failNotEquals(Assert.java:513)
	at org.testng.Assert.assertTrue(Assert.java:42)
	at org.testng.Assert.assertTrue(Assert.java:52)
	at com.example.BasicExtentReport.testCase4(BasicExtentReport.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase4 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="getResult" is-config="true" duration-ms="0" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase2 status=SUCCESS method=BasicExtentReport.testCase2()[pri:0, instance:com.example.BasicExtentReport@e25b2fe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="testCase3()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="testCase3" duration-ms="0" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase3 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="getResult" is-config="true" duration-ms="21" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase4 status=FAILURE method=BasicExtentReport.testCase4()[pri:0, instance:com.example.BasicExtentReport@e25b2fe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="SKIP" signature="testCase5()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="testCase5" duration-ms="2" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <exception class="org.testng.SkipException">
            <message>
              <![CDATA[Skipping this test with exception]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.testng.SkipException: Skipping this test with exception
	at com.example.BasicExtentReport.testCase5(BasicExtentReport.java:79)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:645)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)
	at org.testng.TestRunner.privateRun(TestRunner.java:756)
	at org.testng.TestRunner.run(TestRunner.java:610)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:387)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:382)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:340)
	at org.testng.SuiteRunner.run(SuiteRunner.java:289)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1293)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1218)
	at org.testng.TestNG.runSuites(TestNG.java:1133)
	at org.testng.TestNG.run(TestNG.java:1104)
	at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:114)
	at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
	at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- org.testng.SkipException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCase5 -->
        <test-method status="PASS" signature="getResult(org.testng.ITestResult)[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="getResult" is-config="true" duration-ms="4" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[[TestResult name=testCase5 status=SKIP method=BasicExtentReport.testCase5()[pri:0, instance:com.example.BasicExtentReport@e25b2fe] output={null}]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- getResult -->
        <test-method status="PASS" signature="tearDown()[pri:0, instance:com.example.BasicExtentReport@e25b2fe]" name="tearDown" is-config="true" duration-ms="726" started-at="2021-08-25T09:13:29Z" finished-at="2021-08-25T09:13:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
      </class> <!-- com.example.BasicExtentReport -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
